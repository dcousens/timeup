#!/bin/bash

function datediff () {
	a=$(date --date=@"$1" +%s)
	b=$(date --date=@"$2" +%s)
	echo $(( (b - a) ))
}

function showtime () {
	h=$(echo "$1/3600" | bc)
	m=$(echo "($1%3600)/60" | bc)
	s=$(echo "$1%60" | bc)

	line=''
	if [ "$h" -ne 0 ]; then
		line+=$(printf '%dh' "$h")
	fi
	if [ "$m" -ne 0 ]; then
		line+=$([[ -n $line ]] && echo ' ')
		line+=$(printf '%dm' "$m")
	fi
	if [ "$s" -ne 0 ]; then
		line+=$([[ -n $line ]] && echo ' ')
		line+=$(printf '%ds' "$s")
	fi
	echo "$line"
}

utc=$(date +'%s')
timedir="$TIMEUPDIR"
if [ -z "$timedir" ]; then
	timedir="$HOME/.timeup"
	if [ ! -d "$timedir" ]; then
		read -rp "Create $timedir? (y/N)? " ans
		if [[ $ans =~ ^[Yy]$ ]]; then
			exit
		else
			mkdir -p "$timedir/projects"
		fi
	fi
fi

archivefile="$timedir/archived.txt"
histfile="$timedir/history.txt"
lockfile="$timedir/.lock"
projdir="$timedir/projects"
nbsp='<i> </i>'

function track () {
	diff=$(datediff "$2" "$3")
	duration=$(showtime "$diff")
	notify-send -u critical -t 4000 "$nbsp$1 ($duration)"
	echo "logged $1 ($duration)"
	echo "$1 $2 $3" >> "$histfile"
}

function endtask () {
	_task=$(<"$lockfile" cut -f1 -d' ')
	_since=$(<"$lockfile" cut -f2 -d' ')
	track "$_task" "$_since" "$utc"
	rm "$lockfile"
}

function archivetask () {
	bak=$(mktemp)
	<"$histfile" grep "^$1/" >> "$archivefile"
	<"$histfile" grep -v "^$1/" > "$bak"
	count=$(<"$histfile" grep --count "^$1/")
	echo "archived $1 ($count entries)"
	mv "$bak" "$histfile"
}

function starttask () {
	if [ -f "$lockfile" ]; then
		endtask
	fi

	notify-send "$nbsp$1 started"
	echo "$1 $utc" > "$lockfile"
}

# shellcheck disable=SC2059
function report () {
	pymap=$(cat << END
from collections import Counter
import sys

minutc = int(sys.argv[1])
maxutc = int(sys.argv[2])

sum = 0
count = Counter()
for line in sys.stdin:
	(task, begin, end) = line.split(' ', 2)
	begin = int(begin)
	end = int(end)
	if (begin < minutc): continue
	if (end > maxutc): continue

	duration = end - begin
	count[task] += duration
	sum += duration

report = sorted((x, count[x]) for x in count)
for a, b in report:
	print(a, b)

print('total', sum)
END
	)

	_format='%-24s %-14s\n'
	printf "$_format" 'Task' 'Duration'
	printf "$_format" '------------------------' '--------------'

	<"$histfile" python -c "$pymap" "$1" "$2" | while read -r line; do
		_task=$(echo "$line" | cut -f1 -d' ')
		_seconds=$(echo "$line" | cut -f2 -d' ')
		duration=$(showtime "$_seconds")
		printf "$_format" "$_task" "$duration"
	done
}

if [ "$1" == 'stop' ]; then
	if [ -f "$lockfile" ]; then
		endtask
	fi

	exit 0
fi

if [ "$1" == 'archive' ]; then
	if [ "$#" -ne 3 ]; then
		archivetask "$2"
		exit 0
	fi

	echo 'Invalid arguments'
	exit 1
fi

if [ "$1" == 'track' ]; then
	if [ "$#" -eq 3 ]; then
		a="$utc"
		b=$(date --date="now+$3" +%s)
	elif [ "$#" -eq 4 ]; then
		a=$(date --date="$3" +%s)
		b=$(date --date="$4" +%s)
	else
		echo 'Invalid arguments'
		exit 1
	fi

	track "$2" "$a" "$b"
	exit 0
fi

if [ "$1" == 'report' ]; then
	minutc=0
	maxutc=4131262800 # 2100-12-1

	# date to date
	if [ "$#" -gt 2 ]; then
		minutc=$(date --date="$2" +%s)
		maxutc=$(date --date="$3" +%s)
	# 1 day
	elif [ "$#" -gt 1 ]; then
		minutc=$(date --date="$2" +%s)
		maxutc=$(echo "$minutc+86400" | bc)
	fi

	report "$minutc" "$maxutc"
	exit 0
fi

task=$( \
	{ \
		yes "$(<"$histfile" tail -n1)" | head -n10 # highest priority
		<"$histfile" tail -n5 # prioritize last 5
		<"$histfile" tail -n50 | cut -f1 -d' ' | sort --unique # prioritize semi-recent
		find "$projdir" -mindepth 2 -printf '%P\n'
	} | cut -f1 -d' ' \
	| sort \
	| uniq --count \
	| sort -k1,1nr -k2,2 \
	| colrm 1 8 \
	| dmenu "$@")

if [ -z "$task" ]; then
	exit 0
fi

starttask "$task"
