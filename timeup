#!/bin/bash -e

function datediff () {
	a=$(date --date=@"$1" +%s)
	b=$(date --date=@"$2" +%s)
	echo $(( (b - a) ))
}

function showtime () {
	h=$(echo "$1/3600" | bc)
	m=$(echo "($1%3600)/60" | bc)
	s=$(echo "$1%60" | bc)

	line=''
	if [ "$h" -ne 0 ]; then
		line+=$(printf '%dh' "$h")
	fi
	if [ "$m" -ne 0 ]; then
		line+=$([[ -n $line ]] && echo ' ')
		line+=$(printf '%dm' "$m")
	fi
	if [ "$s" -ne 0 ]; then
		line+=$([[ -n $line ]] && echo ' ')
		line+=$(printf '%ds' "$s")
	fi
	echo "$line"
}

now=$(date +'%s')
timedir="$TIMEUPDIR"
if [ -z "$timedir" ]; then
	timedir="$HOME/.timeup"
	if [ ! -d "$timedir" ]; then
		read -rp "Create $timedir? (y/N)? " ans
		if [[ $ans =~ ^[Yy]$ ]]; then
			exit
		else
			mkdir -p "$timedir"
		fi
	fi
fi

archivefile="$timedir/archived.txt"
histfile="$timedir/history.txt"
lockfile="$timedir/.lock"
tagsfile="$timedir/tags.txt"

function track () {
	diff=$(datediff "$2" "$3")
	duration=$(showtime "$diff")
	notify-send -u critical -t 4000 '' "$1 ($duration)"

	echo "logged $1 ($duration)"
	echo "$@" >> "$histfile"
}

function endtask () {
	_task=$(<"$lockfile" cut -f1 -d' ')
	_since=$(<"$lockfile" cut -f2 -d' ')
	_comment=''
	if [ -f "$lockfile.comment" ]; then
		_comment=$(<"$lockfile.comment" sed -z 's/\n/\\n/g')
	fi
	track "$_task" "$_since" "$now" "$_comment"
	rm "$lockfile"
	rm --force "$lockfile.comment"
}

function starttask () {
	if [ -f "$lockfile" ]; then
		endtask
	fi

	notify-send '' "$1 started"
	echo "$1 $now" > "$lockfile"
}

function filtered () {
	_min="$1"
	_max="$2"
	_task="$3"
	_archive="$4"
	_drop="$5"

	pyfilter=$(cat << END
import sys

minutc = int(sys.argv[1])
maxutc = int(sys.argv[2])
wanted = sys.argv[3]
drop = sys.argv[4] == 'drop'
for line in sys.stdin:
	(task, begin, end, *_) = line.split(' ', 3)
	begin = int(begin)
	end = int(end)
	if (begin >= minutc and begin <= maxutc and task.count(wanted) > 0):
		if (not drop):
			sys.stdout.write(line)
	elif (drop):
		sys.stdout.write(line)
END
	)

	{
		cat "$histfile"
		[ -n "$_archive" ] && cat "$archivefile"
	}	| python -c "$pyfilter" "$_min" "$_max" "$_task" "$_drop"
}

function archivetask () {
	newhist=$(mktemp)
	<"$histfile" filtered "$1" "$2" "$3" "" >> "$archivefile"
	<"$histfile" filtered "$1" "$2" "$3" "" drop > "$newhist"
	count=$(diff -y "$histfile" "$newhist" | grep -o '<' | wc -l)
	echo "archived $3 ($count entries)"
	mv "$newhist" "$histfile"
}

# shellcheck disable=SC2059
function reporter () {
	pymap=$(cat << END
from collections import Counter
import sys

sum = 0
durations = Counter()
count = Counter()
for line in sys.stdin:
	(task, begin, end, *_) = line.split(' ', 3)
	begin = int(begin)
	end = int(end)
	duration = end - begin
	durations[task] += duration
	count[task] += 1
	durations['Total'] += duration
	count['Total'] += 1

report = sorted((x, durations[x]) for x in durations)
for a, b in report:
	if (a == 'Total'): continue
	print(a, count[a], b)

print()
print('Total', count['Total'], durations['Total'])
END
	)

	_format='%-24s %-14s %-5s\n'

	printf "$_format" 'Task' 'Duration' 'Count'
	printf "$_format" '------------------------' '--------------' '-----'
	python -c "$pymap" | while read -r line; do
		if [ -z "$line" ]; then
			printf "$_format" '------------------------' '--------------' '-----'
			continue
		fi
		_task=$(echo "$line" | cut -f1 -d' ')
		_instances=$(echo "$line" | cut -f2 -d' ')
		_seconds=$(echo "$line" | cut -f3 -d' ')
		duration=$(showtime "$_seconds")
		printf "$_format" "$_task" "$duration" "$_instances"
	done
}

# boo, poor performance
function log () {
	_a=$(date --date=@"$2" +"%Y/%m/%d %H:%M %a")
	_b=$(date --date=@"$3" +"%Y/%m/%d %H:%M %a")
	diff=$(datediff "$2" "$3")
	duration=$(showtime "$diff")
	echo "$1, $_a to $_b for $duration"
	if [ -n "$4" ]; then
		echo "$4" | sed 's/\\n/\n/g' | sed 's/^/	/g'
	fi
}

function logger () {
	while read -r line; do
		_task=$(echo "$line" | cut -f1 -d' ')
		_utc1=$(echo "$line" | cut -f2 -d' ')
		_utc2=$(echo "$line" | cut -f3 -d' ')
		_comment=$(echo "$line" | cut -f4- -d' ')
		log "$_task" "$_utc1" "$_utc2" "$_comment"
	done
}

if [ "$1" == 'start' ]; then
	if [ -f "$lockfile" ]; then
		endtask
	fi
	starttask "$2"

	exit 0
fi

if [ "$1" == 'stop' ]; then
	if [ -f "$lockfile" ]; then
		endtask
	fi

	exit 0
fi

if [ "$1" == 'last' ]; then
	line=$(<"$histfile" tail -n1)
	_task=$(echo "$line" | cut -f1 -d' ')
	_utc1=$(echo "$line" | cut -f2 -d' ')
	_utc2=$(echo "$line" | cut -f3 -d' ')
	log "$_task" "$_utc1" "$_utc2"
	exit 0
fi

# filters
task=''
minutc=0
maxutc=4131262800 # 2100-12-1

if [ "$1" == 'track' ]; then
	if [ "$#" -eq 3 ]; then
		minutc=$(date --date="now-$3" +%s)
		maxutc="$now"
	elif [ "$#" -eq 4 ]; then
		minutc=$(date --date="$3" +%s)
		maxutc=$(date --date="$4" +%s)
	else
		echo 'Invalid arguments'
		exit 1
	fi

	track "$2" "$minutc" "$maxutc"
	exit 0
fi

if [ "$1" == 'archive' ]; then
	if [ "$#" -eq 2 ]; then
		minutc=$(date --date="last year" +%s)
	elif [ "$#" -eq 3 ]; then
		minutc=$(date --date="last year" +%s)
		maxutc=$(date --date="$3" +%s)
	elif [ "$#" -eq 4 ]; then
		minutc=$(date --date="$3" +%s)
		maxutc=$(date --date="$4" +%s)
	else
		echo 'Invalid arguments'
		exit 1
	fi

	archivetask "$minutc" "$maxutc" "$2"
	exit 0
fi

if [ "$1" == 'report' ] || [ "$1" == 'areport' ] || [ "$1" == 'log' ] || [ "$1" == 'alog' ] || [ "$1" == 'summary' ]; then
	# date to date
	if [ "$#" -gt 2 ]; then
		minutc=$(date --date="$2" +%s)
		maxutc=$(date --date="$3" +%s)
	# 1 day
	elif [ "$#" -gt 1 ]; then
		minutc="$2"
		if [ "$2" == 'today' ]; then
			minutc='today 0:00'
		fi

		if [ "$2" == 'yesterday' ]; then
			minutc='yesterday 0:00'
		fi

		if [ "$2" == 'tomorrow' ]; then
			minutc='tomorrow 0:00'
		fi

		minutc=$(date --date="$minutc" +%s 2> /dev/null)
		if [ -z "$minutc" ]; then
			minutc=0
			task="$2"
		else
			maxutc=$(echo "$minutc+86400" | bc)
		fi
	fi

	# support task filtering
	if [ "$#" -gt 3 ]; then
		task="$4"
	fi

	if [ "$1" == 'areport' ]; then
		filtered "$minutc" "$maxutc" "$task" archive | reporter "$task"
	elif [ "$1" == 'report' ]; then
		filtered "$minutc" "$maxutc" "$task" | reporter
	elif [ "$1" == 'summary' ]; then
		filtered "$minutc" "$maxutc" "$task" archive | reporter
		filtered "$minutc" "$maxutc" "$task" archive | logger
	elif [ "$1" == 'alog' ]; then
		filtered "$minutc" "$maxutc" "$task" archive | logger
	else
		filtered "$minutc" "$maxutc" "$task" | logger
	fi
	exit 0
fi

if [ "$1" == 'drop' ]; then
	line=$(<"$histfile" tail -n1)
	_task=$(echo "$line" | cut -f1 -d' ')
	_utc1=$(echo "$line" | cut -f2 -d' ')
	_utc2=$(echo "$line" | cut -f3 -d' ')
	diff=$(datediff "$_utc1" "$_utc2")
	duration=$(showtime "$diff")

	sed -i '$ d' "$histfile"
	notify-send -u critical -t 4000 '' "Dropped $_task ($duration)"
	exit 0
fi

if [ "$1" == 'status' ]; then
	if [ ! -f "$lockfile" ]; then
		exit 1
	fi

	_task=$(<"$lockfile" cut -f1 -d' ')
	_since=$(<"$lockfile" cut -f2 -d' ')
	diff=$(datediff "$_since" "$now")
	duration=$(showtime "$diff")

	echo "$_task for $duration"
	exit 0
fi

if [ "$1" == 'continue' ]; then
	if [ -f "$lockfile" ]; then
		endtask
	fi

	line=$(<"$histfile" tail -n1)
	_task=$(echo "$line" | cut -f1 -d' ')
	_utc1=$(echo "$line" | cut -f2 -d' ')
	_utc2=$(echo "$line" | cut -f3 -d' ')
	_comment=$(echo "$line" | cut -f4- -d' ')
	diff=$(datediff "$_utc1" "$_utc2")
	duration=$(showtime "$diff")

	sed -i '$ d' "$histfile"
	notify-send -u critical -t 4000 '' "Continuing $_task ($duration)"
	echo "$_task $_utc1" > "$lockfile"
	echo -n "$_comment" | sed -z 's/\\n/\n/g' > "$lockfile.comment"
	exit 0
fi

if [ "$1" == 'edit' ]; then
	line=$(<"$histfile" tail -n1)
	_task=$(echo "$line" | cut -f1 -d' ')
	_utc1=$(echo "$line" | cut -f2 -d' ')
	_utc2=$(echo "$line" | cut -f3 -d' ')
	_comment=$(echo "$line" | cut -f4- -d' ')

	if [ "$#" -eq 2 ]; then
		tmp=$(date --date=@"$_utc2")
		a=$(date --date="$tmp-$2" +%s)
		b="$_utc2"
	elif [ "$#" -eq 3 ]; then
		a=$(date --date="$2" +%s)
		b=$(date --date="$3" +%s)
	else
		echo 'Invalid arguments'
		exit 1
	fi

	sed -i '$ d' "$histfile"
	track "$_task" "$a" "$b" "$_comment"
	exit 0
fi

if [ "$1" == 'comment' ]; then
	if [ ! -f "$lockfile" ]; then
		echo 'Not tracking'
		exit 1
	fi

	_task=$(<"$lockfile" cut -f1 -d' ')
	_utc1=$(<"$lockfile" cut -f2 -d' ')
	$EDITOR "$lockfile.comment"
	exit 0
fi

task=$( \
	{ \
		yes "$(<"$histfile" tail -n1)" | head -n4 # previous
		yes "$(<"$histfile" tail -n3)" | head -n3 # previous 3
		<"$histfile" tail -n5 # recent 5
		<"$histfile" tail -n50 | cut -f1 -d' ' | sort --unique # recent 50
		<"$histfile" tail -n100 | cut -f1 -d' ' | sort --unique # recent 100
		<"$tagsfile" cat
		echo 'stop'
	} | cut -f1 -d' ' \
	| sort \
	| uniq --count \
	| sort -k1,1nr -k2,2 \
	| colrm 1 8 \
	| dmenu "$@")

if [ "$task" == 'stop' ]; then
	if [ -f "$lockfile" ]; then
		endtask
	fi

	exit 0
fi

if [ -z "$task" ]; then
	exit 0
fi

starttask "$task"
